{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\r\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\r\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\r\n   *\r\n   */\n  flip: PropTypes.bool,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    id,\n    bsPrefix,\n    size,\n    variant,\n    title,\n    type,\n    toggleLabel,\n    children,\n    onClick,\n    href,\n    target,\n    menuRole,\n    renderMenuOnMount,\n    rootCloseEvent,\n    flip,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/_jsxs(Dropdown, {\n    ref: ref,\n    ...props,\n    as: ButtonGroup,\n    children: [/*#__PURE__*/_jsx(Button, {\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      bsPrefix: bsPrefix,\n      href: href,\n      target: target,\n      onClick: onClick,\n      type: type,\n      children: title\n    }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n      split: true,\n      id: id,\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      childBsPrefix: bsPrefix,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: \"visually-hidden\",\n        children: toggleLabel\n      })\n    }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent,\n      flip: flip,\n      children: children\n    })]\n  });\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","string","toggleLabel","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","flip","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","ref","children","props","as","Toggle","split","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"sources":["D:/razzak/React_Django_Ecommerce_Sara-Fashion/frontend/node_modules/react-bootstrap/esm/SplitButton.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport Dropdown from './Dropdown';\r\nimport { alignPropType } from './types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\r\n  id: PropTypes.string,\r\n\r\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\r\n  toggleLabel: PropTypes.string,\r\n\r\n  /** An `href` passed to the non-toggle Button */\r\n  href: PropTypes.string,\r\n\r\n  /** An anchor `target` passed to the non-toggle Button */\r\n  target: PropTypes.string,\r\n\r\n  /** An `onClick` handler passed to the non-toggle Button */\r\n  onClick: PropTypes.func,\r\n\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n\r\n  /** A `type` passed to the non-toggle Button */\r\n  type: PropTypes.string,\r\n\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\r\n  align: alignPropType,\r\n\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n\r\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\r\n  renderMenuOnMount: PropTypes.bool,\r\n\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n\r\n  /**\r\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\r\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\r\n   *\r\n   */\r\n  flip: PropTypes.bool,\r\n\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\nconst defaultProps = {\r\n  toggleLabel: 'Toggle dropdown',\r\n  type: 'button'\r\n};\r\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\r\n\r\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\r\n  id,\r\n  bsPrefix,\r\n  size,\r\n  variant,\r\n  title,\r\n  type,\r\n  toggleLabel,\r\n  children,\r\n  onClick,\r\n  href,\r\n  target,\r\n  menuRole,\r\n  renderMenuOnMount,\r\n  rootCloseEvent,\r\n  flip,\r\n  ...props\r\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\r\n  ref: ref,\r\n  ...props,\r\n  as: ButtonGroup,\r\n  children: [/*#__PURE__*/_jsx(Button, {\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    bsPrefix: bsPrefix,\r\n    href: href,\r\n    target: target,\r\n    onClick: onClick,\r\n    type: type,\r\n    children: title\r\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\r\n    split: true,\r\n    id: id,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    childBsPrefix: bsPrefix,\r\n    children: /*#__PURE__*/_jsx(\"span\", {\r\n      className: \"visually-hidden\",\r\n      children: toggleLabel\r\n    })\r\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\r\n    role: menuRole,\r\n    renderOnMount: renderMenuOnMount,\r\n    rootCloseEvent: rootCloseEvent,\r\n    flip: flip,\r\n    children: children\r\n  })]\r\n}));\r\nSplitButton.propTypes = propTypes;\r\nSplitButton.defaultProps = defaultProps;\r\nSplitButton.displayName = 'SplitButton';\r\nexport default SplitButton;"],"mappings":"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"},"metadata":{},"sourceType":"module"}